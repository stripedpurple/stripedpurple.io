---
import type { Size } from "../../types/size";
import type { Direction } from "../../types/direction";
import type { BaseColors } from "../../types/colors";
import { getClasses } from "../../untils/getClasses";

export interface Props extends astroHTML.JSX.HTMLAttributes {
  toColor?: BaseColors;
  fromColor?: BaseColors;
  viaColor?: BaseColors;
  size?: Size;
  lg?: Size;
  direction?: Direction;
  as?: "";
  // class?: string
}

const {
  fromColor = "violet",
  toColor = "fuchsia",
  viaColor = "",
  size = "2xl",
  lg,
  direction = "tr",
  as = "h1",
} = Astro.props as Props;

const directionClass = getClasses({
  "bg-gradient-to-t": direction === "t",
  "bg-gradient-to-tr": direction === "tr",
  "bg-gradient-to-r": direction === "r",
  "bg-gradient-to-br": direction === "br",
  "bg-gradient-to-b": direction === "b",
  "bg-gradient-to-bl": direction === "bl",
  "bg-gradient-to-l": direction === "l",
  "bg-gradient-to-tl": direction === "tl",
});

const colorClasses = getClasses({
  // To Color
  "to-amber-600": toColor === "amber",
  "to-blue-600": toColor === "blue",
  "to-cyan-600": toColor === "cyan",
  "to-emerald-600": toColor === "emerald",
  "to-fuchsia-600": toColor === "fuchsia",
  "to-gray-600": toColor === "gray",
  "to-green-600": toColor === "green",
  "to-indigo-600": toColor === "indigo",
  "to-lime-600": toColor === "lime",
  "to-neutral-600": toColor === "neutral",
  "to-orange-600": toColor === "orange",
  "to-pink-600": toColor === "pink",
  "to-purple-600": toColor === "purple",
  "to-red-600": toColor === "red",
  "to-rose-600": toColor === "rose",
  "to-sky-600": toColor === "sky",
  "to-primary-600": toColor === "slate",
  "to-stone-600": toColor === "stone",
  "to-teal-600": toColor === "teal",
  "to-violet-600": toColor === "violet",
  "to-yellow-600": toColor === "yellow",
  "to-zinc-600": toColor === "zinc",
  "to-inherit": toColor === "inherit",
  "to-current": toColor === "current",
  "to-transparent": toColor === "transparent",
  "to-black": toColor === "black",
  "to-white": toColor === "white",

  // From Color
  "from-amber-600": fromColor === "amber",
  "from-blue-600": fromColor === "blue",
  "from-cyan-600": fromColor === "cyan",
  "from-emerald-600": fromColor === "emerald",
  "from-fuchsia-600": fromColor === "fuchsia",
  "from-gray-600": fromColor === "gray",
  "from-green-600": fromColor === "green",
  "from-indigo-600": fromColor === "indigo",
  "from-lime-600": fromColor === "lime",
  "from-neutral-600": fromColor === "neutral",
  "from-orange-600": fromColor === "orange",
  "from-pink-600": fromColor === "pink",
  "from-purple-600": fromColor === "purple",
  "from-red-600": fromColor === "red",
  "from-rose-600": fromColor === "rose",
  "from-sky-600": fromColor === "sky",
  "from-primary-600": fromColor === "slate",
  "from-stone-600": fromColor === "stone",
  "from-teal-600": fromColor === "teal",
  "from-violet-600": fromColor === "violet",
  "from-yellow-600": fromColor === "yellow",
  "from-zinc-600": fromColor === "zinc",
  "from-inherit": fromColor === "inherit",
  "from-current": fromColor === "current",
  "from-transparent": fromColor === "transparent",
  "from-black": fromColor === "black",
  "from-white": fromColor === "white",

  // Via Color
  "via-amber-600": viaColor === "amber",
  "via-blue-600": viaColor === "blue",
  "via-cyan-600": viaColor === "cyan",
  "via-emerald-600": viaColor === "emerald",
  "via-fuchsia-600": viaColor === "fuchsia",
  "via-gray-600": viaColor === "gray",
  "via-green-600": viaColor === "green",
  "via-indigo-600": viaColor === "indigo",
  "via-lime-600": viaColor === "lime",
  "via-neutral-600": viaColor === "neutral",
  "via-orange-600": viaColor === "orange",
  "via-pink-600": viaColor === "pink",
  "via-purple-600": viaColor === "purple",
  "via-red-600": viaColor === "red",
  "via-rose-600": viaColor === "rose",
  "via-sky-600": viaColor === "sky",
  "via-primary-600": viaColor === "slate",
  "via-stone-600": viaColor === "stone",
  "via-teal-600": viaColor === "teal",
  "via-violet-600": viaColor === "violet",
  "via-yellow-600": viaColor === "yellow",
  "via-zinc-600": viaColor === "zinc",
  "via-inherit": viaColor === "inherit",
  "via-current": viaColor === "current",
  "via-transparent": viaColor === "transparent",
  "via-black": viaColor === "black",
  "via-white": viaColor === "white",
});

const sizeClasses = getClasses({
  "text-xs": size === "xs",
  "text-sm": size === "sm",
  "text-base": size === "md",
  "text-lg": size === "lg",
  "text-xl": size === "xl",
  "text-2xl": size === "2xl",
  "text-3xl": size === "3xl",
  "text-4xl": size === "4xl",
  "text-5xl": size === "5xl",
  "text-6xl": size === "6xl",
  "text-7xl": size === "7xl",
  "text-8xl": size === "8xl",
  "text-9xl": size === "9xl",
  
  // Smalls
  "lg:text-xs": lg === "xs",
  "lg:text-sm": lg === "sm",
  "lg:text-base": lg === "md",
  "lg:text-lg": lg === "lg",
  "lg:text-xl": lg === "xl",
  "lg:text-2xl": lg === "2xl",
  "lg:text-3xl": lg === "3xl",
  "lg:text-4xl": lg === "4xl",
  "lg:text-5xl": lg === "5xl",
  "lg:text-6xl": lg === "6xl",
  "lg:text-7xl": lg === "7xl",
  "lg:text-8xl": lg === "8xl",
  "lg:text-9xl": lg === "9xl",
});

const Tag = as;
---

<Tag class={`${Astro.props?.class} ${colorClasses} ${directionClass} ${sizeClasses} gtitle title`}>
  <slot/>
</Tag>

<style scoped>
  .gtitle {
    @apply w-full inline-block -mx-4 px-4 bg-clip-text text-transparent uppercase max-w-full overflow-hidden;
  }
</style>